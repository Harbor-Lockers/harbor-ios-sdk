// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios14.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HarborLockersSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import Foundation
@_exported import HarborLockersSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public typealias BLEConnectionResult = (_ result: Swift.String?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias BLEResponseHandler = (_ responseData: Foundation.Data?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias BLETowersDiscoveredHandler = (_ peripherals: [HarborLockersSDK.Tower]) -> Swift.Void
public typealias SyncCompletionHandler = (_ success: Swift.Bool, _ error: Foundation.NSError?) -> Swift.Void
public typealias SendEventsToServerResponseHandler = (_ success: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void
extension Foundation.Data {
  public func hexString() -> Swift.String
  public init?(hexString: Swift.String)
}
extension Foundation.NSData {
  @objc dynamic public func initWith(hexString: Swift.String) -> Foundation.NSData?
  @objc dynamic public func hexString() -> Swift.String
  @objc public static func randomCryptoBytes(_ count: Swift.Int) -> Foundation.NSData?
}
@objc public enum HarborLogLevel : Swift.Int {
  case debug = 0
  case verbose = 1
  case info = 5
  case warning = 15
  case error = 20
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class HarborLogLevelName : ObjectiveC.NSObject {
  @objc public class func withLevel(_ logLevel: HarborLockersSDK.HarborLogLevel) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Tower : ObjectiveC.NSObject {
  @objc final public let firmwareVersion: Swift.String!
  @objc public var towerId: Foundation.Data!
  @objc public var towerName: Swift.String!
  @objc public var RSSI: Foundation.NSNumber
  @objc public func peripheralUUID() -> Swift.String
  @objc deinit
}
@objc public enum SessionPermission : Swift.Int {
  case Sync, LockerPickup, LockerDelivery, Owner, Technician, Developer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol HarborConnectionDelegate {
  @objc func harborDidDisconnectTower(_ tower: HarborLockersSDK.Tower?)
}
public typealias CommandSentResponseHandler = (_ success: Swift.Bool, _ error: Foundation.NSError?) -> Swift.Void
@objc public protocol HarborSDKDelegate {
  @objc func harborDidDiscoverTowers(_ towers: [HarborLockersSDK.Tower])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HarborSDK : ObjectiveC.NSObject {
  @objc public static let shared: HarborLockersSDK.HarborSDK
  @objc public var delegate: (any HarborLockersSDK.HarborSDKDelegate)!
  @objc public var loggerDelegate: (any HarborLockersSDK.HarborLoggerDelegate)?
  @objc public var logLevel: HarborLockersSDK.HarborLogLevel
  @objc public var connectionDelegate: (any HarborLockersSDK.HarborConnectionDelegate)?
  @objc public func isSyncing() -> Swift.Bool
  @objc public func setBaseURL(_ baseURL: Swift.String)
  @objc public func loginWithEmail(_ email: Swift.String, password: Swift.String, completion: @escaping HarborLockersSDK.APIResponseWithStatusCode)
  @objc public func setAccessToken(_ token: Swift.String)
  @objc public func setupLogger(delegate: any HarborLockersSDK.HarborLoggerDelegate, level: HarborLockersSDK.HarborLogLevel = .info)
  @objc public func setEnvironment(_ environment: HarborLockersSDK.Environment)
  @objc public func downloadTowerConfiguration(completion: @escaping (_ success: Swift.Bool, _ commandsFailed: [Swift.String]?) -> Swift.Void)
  @objc public func startTowerDiscovery()
  @objc public func startTowerDiscovery(allowDuplicateScan: Swift.Bool)
  @objc public func connectToTower(_ tower: HarborLockersSDK.Tower, completion: @escaping HarborLockersSDK.BLEConnectionResult)
  @objc deinit
}
extension HarborLockersSDK.HarborSDK {
  @objc dynamic public func sync(completionHandler: @escaping HarborLockersSDK.SyncCompletionHandler)
  @objc dynamic public func establishSession(towerId: Foundation.Data?, duration: Swift.Int = 600, sessionPermissions: HarborLockersSDK.SessionPermission, completionHandler: @escaping HarborLockersSDK.CommandSentResponseHandler)
  @objc dynamic public func establishSession(towerId: Foundation.Data?, duration: Swift.Int = 600, automaticSyncEnabled: Swift.Bool, sessionPermissions: HarborLockersSDK.SessionPermission, completionHandler: @escaping HarborLockersSDK.CommandSentResponseHandler)
  @objc dynamic public func getSessionRequest(towerId: Foundation.Data?, duration: Swift.Int = 3600, sessionPermissions: HarborLockersSDK.SessionPermission, completionHandler: @escaping HarborLockersSDK.RequestTowerSessionAPIResponse)
  @objc dynamic public func sendRequestSession(payloadAuth: Foundation.Data, payload: Foundation.Data, sessionSeed: Foundation.Data, completionHandler: @escaping HarborLockersSDK.CommandSentResponseHandler)
  @objc dynamic public func sendTerminateSession(errorCode: Swift.Int, errorMessage: Swift.String?, disconnectAfterSessionTerminated: Swift.Bool = true, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  #warning("We might want to remove some of the sync events from the public interface as sync must be handled entirely by the SDK.")
  @objc dynamic public func sendRequestSyncStatus(completionHandler: @escaping (_ syncEventStart: Swift.Int, _ syncEventCount: Swift.Int, _ syncCommandStart: Swift.Int, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendSyncPull(syncEventStart: Swift.UInt32, completionHandler: @escaping (_ firstEventId: Swift.Int, _ syncEventCount: Swift.Int, _ payload: Foundation.Data, _ payloadAuth: Foundation.Data, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendSyncPush(payload: Foundation.Data, payloadAuth: Foundation.Data, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendMarkSeenEvents(syncEventStart: Swift.UInt32, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendResetEventCounter(syncEventStart: Swift.UInt32, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendResetCommandCounter(syncCommandStart: Swift.UInt32, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendAddClientEvent(clientInfo: Foundation.Data, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendFindAvailableLockers(completionHandler: @escaping (_ availableLockers: [Swift.Int : Swift.Int]?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendFindLockersWithToken(matchAvailable: Swift.Bool, matchToken: Foundation.Data, completionHandler: @escaping (_ availableLockers: [Swift.Int : Swift.Int]?, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendOpenLockerWithToken(payload: Foundation.Data, payloadAuth: Foundation.Data, completionHandler: @escaping (_ lockerId: Swift.Int, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendOpenAvailableLocker(matchLockerType: Swift.Int, matchAvailable: Swift.Bool, matchToken: Foundation.Data?, lockerToken: Foundation.Data, lockerAvailable: Swift.Bool, clientInfo: Foundation.Data, completionHandler: @escaping (_ lockerId: Swift.Int, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendReopenLocker(completionHandler: @escaping (_ lockerId: Swift.Int, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendCheckLockerDoor(completionHandler: @escaping (_ doorOpen: Swift.Bool, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func sendRevertLockerState(clientInfo: Foundation.Data, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendSetKeypadCode(keypadCode: Swift.String, keypadCodePersists: Swift.Bool, keypadNextToken: Foundation.Data, keypadNextAvailable: Swift.Bool, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendTapLocker(lockerTapIntervalMS: Swift.Int, lockerTapCount: Swift.Int, completionHandler: HarborLockersSDK.CommandSentResponseHandler?)
  @objc dynamic public func sendCheckAllLockerDoors(completionHandler: @escaping (_ lockerDoorsOpen: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void)
}
public typealias APIResponseWithStatusCode = (_ responseCode: Swift.Int, _ error: Foundation.NSError?) -> Swift.Void
public typealias RequestTowerSessionAPIResponse = (_ payload: Foundation.Data?, _ payloadAuth: Foundation.Data?, _ sessionSeed: Foundation.Data?, _ towerId: Foundation.Data?, _ error: Foundation.NSError?) -> Swift.Void
public typealias RequestTowerConfigurationAPIResponse = (_ towerId: Foundation.Data?, _ commands: [Foundation.Data]?, _ error: Foundation.NSError?) -> Swift.Void
@objc public enum Environment : Swift.Int {
  case Development = 0
  case Sandbox = 2
  case Production = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol HarborLoggerDelegate {
  @objc func harborDidLog(message: Swift.String, logType: HarborLockersSDK.HarborLogLevel, context: [Swift.String : Any]?)
}
@_hasMissingDesignatedInitializers public class HarborLogger {
  @objc deinit
}
extension HarborLockersSDK.HarborLogLevel : Swift.Equatable {}
extension HarborLockersSDK.HarborLogLevel : Swift.Hashable {}
extension HarborLockersSDK.HarborLogLevel : Swift.RawRepresentable {}
extension HarborLockersSDK.SessionPermission : Swift.Equatable {}
extension HarborLockersSDK.SessionPermission : Swift.Hashable {}
extension HarborLockersSDK.SessionPermission : Swift.RawRepresentable {}
extension HarborLockersSDK.Environment : Swift.Equatable {}
extension HarborLockersSDK.Environment : Swift.Hashable {}
extension HarborLockersSDK.Environment : Swift.RawRepresentable {}
